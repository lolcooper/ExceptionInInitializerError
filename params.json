{"name":"Exceptionininitializererror","tagline":"ExceptionInInitializerError","body":"public class main extends JavaPlugin {\r\n\t\r\n\tpublic static String Prefix = ChatColor.DARK_GREEN + \"[xReligion] \";\r\n\tpublic static Connection c = null;\r\n\tpublic static int MaxReligions = 6;\r\n\t\r\n\tpublic void onEnable()\r\n\t{\r\n\t\tSystem.out.println(\"[xReligion] Coder: ReborN\");\r\n\t\tSystem.out.println(\"[xReligion] Plugin was successfully activated!\");\r\n\t\tSystem.out.println(\"[xReligion] Please do not publish a changed SourceCode\");\r\n\t\tSystem.out.println(\"if you hadn't asked me\");\r\n\t\tSystem.out.println(\"[xReligion] Expect cool stuff :)\");\r\n\t\t\r\n\t\t//Loading config.yml\r\n\t\tLoadConfig();\r\n\t\t//Register Commands (CommandExecutor)\r\n\t\tRegisterCommands();\r\n\t\t\r\n\t\t//MySQL Connection\r\n\t\ttry {\r\n\t\t\tMySQL MySQL = new MySQL(this, this.getConfig().getString(\"MySQL.Host\"), this.getConfig().getString(\"MySQL.Port\"), this.getConfig().getString(\"MySQL.Database\"), this.getConfig().getString(\"MySQL.User\"), this.getConfig().getString(\"MySQL.Password\"));\r\n\t\t\tc = MySQL.openConnection();\r\n\t\t\tSystem.out.println(\"[xReligion] MySQL Connection was successful!\");\r\n\t\t} catch (ClassNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\tSystem.out.println(\"[xReligion] MySQL Connection - ERROR [1]\");\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (SQLException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\tSystem.out.println(\"[xReligion] MySQL Connection - ERROR [2]\");\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t//SevenDayTimer sdt = new SevenDayTimer();\r\n\t\tSevenDayTimer.SevenDayStartTimer();\r\n\t}\r\n\r\npublic class SevenDayTimer extends JavaPlugin {\r\n\t\r\n\tpublic static int RelTiming = new main().getConfig().getInt(\"Sunday.Time\");\r\n\tpublic static Calendar cal = Calendar.getInstance();\r\n\t@SuppressWarnings(\"deprecation\")\r\n\tpublic static int min = cal.getTime().getMinutes();\r\n\t\r\n\t@SuppressWarnings(\"deprecation\")\r\n\tpublic static void SevenDayStartTimer()\r\n\t{\r\n\t\tBukkit.getServer().getScheduler().scheduleAsyncRepeatingTask(new main(), new Runnable() {\r\n\t\t\t\r\n\t\t\tpublic void run()\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tif(min == RelTiming)\r\n\t\t\t\t{\r\n\t\t\t\t\tSystem.out.println(\"Sonntag!\");\r\n\t\t\t\t\tmin++;\r\n\t\t\t\t\tBreakSevenDayTimer();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, 0L, 20L);\r\n\t}\r\n\t\r\n\t@SuppressWarnings(\"deprecation\")\r\n\tprivate static void BreakSevenDayTimer()\r\n\t{\r\n\t\tBukkit.getServer().getScheduler().scheduleAsyncDelayedTask(new main(), new Runnable() {\r\n\t\t\t\r\n\t\t\tpublic void run()\r\n\t\t\t{\r\n\t\t\t\tCalendar cal = Calendar.getInstance();\r\n\t\t\t\tmin = cal.getTime().getMinutes();\r\n\t\t\t}\r\n\t\t}, 20*60L);\r\n\t}\r\n\t\r\n}","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}